name: iOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select latest installed Xcode
        run: |
          set -euo pipefail
          echo "Available Xcodes:" && ls -1 /Applications | grep -E '^Xcode_.*\.app' || true
          XCODE_PATH=$(ls -d /Applications/Xcode_*.app | sort -V | tail -n1)
          echo "Selecting $XCODE_PATH"
          sudo xcode-select -s "$XCODE_PATH"
          xcodebuild -version

      - name: Install XcodeGen (pinned)
        run: |
          brew update
          brew install xcodegen@2.41 || brew install xcodegen

      - name: Verify repository paths
        run: |
          set -euo pipefail
          pwd
          ls -la
          ls -la TaskiAI
          ls -la TaskiAI/TaskiAI
          test -d TaskiAI/TaskiAI

      - name: Regenerate Xcode project for Xcode 15.4
        run: |
          rm -rf TaskiAI.xcodeproj
          xcodegen generate --spec Project.yml --project-root .

      - name: Cache SwiftPM artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved', 'Project.yml') }}

      - name: Show schemes
        run: |
          ls -la
          test -d TaskiAI.xcodeproj
          xcodebuild -list -project TaskiAI.xcodeproj

      - name: Resolve available iOS Simulator (by UDID)
        id: sim
        shell: bash
        run: |
          set -euo pipefail
          json=$(xcrun simctl list devices available -j)
          # Prefer iPhone 16 Pro/Pro Max/16/15 Pro etc., else any iPhone
          udid=$(ruby -r json -e "j=JSON.parse(STDIN.read); d=j['devices'].values.flatten.select{|x| x['isAvailable']}.select{|x| x['name'] =~ /iPhone/}; pri=%w[iPhone\ 16\ Pro\ Max iPhone\ 16\ Pro iPhone\ 16 iPhone\ 15\ Pro\ Max iPhone\ 15\ Pro iPhone\ 15]; c=(pri.map{|p| d.find{|x| x['name']==p}} + d).compact; puts(c.first && c.first['udid'])" <<< "$json")
          name=$(ruby -r json -e "j=JSON.parse(STDIN.read); d=j['devices'].values.flatten.select{|x| x['isAvailable']}.select{|x| x['name'] =~ /iPhone/}; puts(d.first && d.first['name'])" <<< "$json")
          if [ -z "$udid" ]; then echo 'No available iPhone simulators found' >&2; exit 1; fi
          echo "Using simulator: $name ($udid)"
          echo "id=$udid" >> "$GITHUB_OUTPUT"

      - name: Resolve default scheme (JSON)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          json=$(xcodebuild -list -project TaskiAI.xcodeproj -json | tr -d '\n')
          scheme=$(ruby -r json -e "j=JSON.parse(STDIN.read); puts((j['project'] && j['project']['schemes'] && j['project']['schemes'][0]) || (j['project'] && j['project']['targets'] && j['project']['targets'][0]) || 'TaskiAI')" <<< "$json")
          echo "Using scheme: $scheme"
          echo "scheme=$scheme" >> "$GITHUB_OUTPUT"

      - name: Build and test (iOS Simulator)
        env:
          NSUnbufferedIO: "YES"
        run: |
          set -euo pipefail
          xcodebuild \
            -project TaskiAI.xcodeproj \
            -scheme "${{ steps.resolve.outputs.scheme }}" \
            -destination "id=${{ steps.sim.outputs.id }}" \
            -sdk iphonesimulator \
            -configuration Debug \
            clean build test \
            GENERATE_INFOPLIST_FILE=YES \
            CODE_SIGNING_ALLOWED=NO
        shell: bash
