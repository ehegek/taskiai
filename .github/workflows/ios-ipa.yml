name: iOS IPA Export

on:
  workflow_dispatch:
    inputs:
      export-method:
        description: Export method (app-store, ad-hoc, development)
        default: ad-hoc
        required: true

jobs:
  build-export:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select latest installed Xcode
        run: |
          set -euo pipefail
          XCODE_PATH=$(ls -d /Applications/Xcode_*.app | sort -V | tail -n1)
          echo "Using $XCODE_PATH"
          sudo xcode-select -s "$XCODE_PATH"
          xcodebuild -version

      - name: Install XcodeGen (if needed)
        run: |
          if [ ! -d "TaskiAI.xcodeproj" ] && [ -f "Project.yml" ]; then
            brew update
            brew install xcodegen@2.41 || brew install xcodegen
            xcodegen generate --spec Project.yml --project-root .
          fi

      - name: Resolve scheme
        id: scheme
        shell: bash
        run: |
          set -euo pipefail
          json=$(xcodebuild -list -project TaskiAI.xcodeproj -json | tr -d '\n')
          scheme=$(ruby -r json -e "j=JSON.parse(STDIN.read); puts((j['project'] && j['project']['schemes'] && j['project']['schemes'][0]) || (j['project'] && j['project']['targets'] && j['project']['targets'][0]) || 'TaskiAI')" <<< "$json")
          echo "scheme=$scheme" >> "$GITHUB_OUTPUT"

      - name: Prepare keychain and signing (if provided)
        id: signing
        shell: bash
        env:
          P12_BASE64: ${{ secrets.IOS_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
          PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          has_signing=0
          security create-keychain -p "" build.keychain || true
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "" build.keychain
          security list-keychains -d user -s build.keychain login.keychain || true

          if [ -n "${P12_BASE64:-}" ]; then
            echo "$P12_BASE64" | base64 --decode > cert.p12
            security import cert.p12 -k build.keychain -P "${P12_PASSWORD:-}" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
            has_signing=1
          fi

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          if [ -n "${PROFILE_BASE64:-}" ]; then
            echo "$PROFILE_BASE64" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/profile.mobileprovision"
            has_signing=1
          fi

          echo "has_signing=$has_signing" >> "$GITHUB_OUTPUT"
          echo "TEAM_ID=${TEAM_ID:-}" >> "$GITHUB_OUTPUT"

      - name: Archive for iOS device (Release)
        if: steps.signing.outputs.has_signing == '1'
        run: |
          set -euo pipefail
          xcodebuild \
            -project TaskiAI.xcodeproj \
            -scheme "${{ steps.scheme.outputs.scheme }}" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/TaskiAI.xcarchive \
            CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${{ steps.signing.outputs.TEAM_ID }}" \
            clean archive

      - name: Create exportOptions.plist
        if: steps.signing.outputs.has_signing == '1'
        run: |
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>${{ inputs.export-method }}</string>
            <key>teamID</key>
            <string>${{ steps.signing.outputs.TEAM_ID }}</string>
            <key>compileBitcode</key>
            <false/>
            <key>destination</key>
            <string>export</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>stripSwiftSymbols</key>
            <true/>
          </dict>
          </plist>
          EOF

      - name: Export IPA
        if: steps.signing.outputs.has_signing == '1'
        run: |
          set -euo pipefail
          xcodebuild -exportArchive \
            -archivePath build/TaskiAI.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build/export
          ls -la build/export

      - name: Upload IPA artifact
        if: steps.signing.outputs.has_signing == '1'
        uses: actions/upload-artifact@v4
        with:
          name: TaskiAI-IPA
          path: build/export/*.ipa

      - name: Fallback - build simulator .app (unsigned)
        if: steps.signing.outputs.has_signing != '1'
        run: |
          set -euo pipefail
          xcodebuild \
            -project TaskiAI.xcodeproj \
            -scheme "${{ steps.scheme.outputs.scheme }}" \
            -sdk iphonesimulator \
            -configuration Release \
            -destination 'generic/platform=iOS Simulator' \
            BUILD_DIR=$PWD/build \
            CODE_SIGNING_ALLOWED=NO \
            clean build
          app_path=$(find build -type d -name "*.app" | head -n1)
          echo "Built app: $app_path"
          ditto -ck --keepParent "$app_path" build/TaskiAI-simulator.app.zip

      - name: Upload simulator app artifact
        if: steps.signing.outputs.has_signing != '1'
        uses: actions/upload-artifact@v4
        with:
          name: TaskiAI-Simulator-App
          path: build/TaskiAI-simulator.app.zip
